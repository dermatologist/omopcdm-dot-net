// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app;

namespace app.Migrations
{
    [DbContext(typeof(appContext))]
    partial class appContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("omopcdmlib.Models.AttributeDefinition", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AttributeDefinitionId")
                        .HasColumnName("attribute_definition_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttributeDescription")
                        .HasColumnName("attribute_description")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnName("attribute_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("AttributeSyntax")
                        .HasColumnName("attribute_syntax")
                        .HasColumnType("TEXT");

                    b.Property<long>("AttributeTypeConceptId")
                        .HasColumnName("attribute_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("attribute_definition");
                });

            modelBuilder.Entity("omopcdmlib.Models.CareSite", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CareSiteId")
                        .HasColumnName("care_site_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CareSiteName")
                        .HasColumnName("care_site_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CareSiteSourceValue")
                        .HasColumnName("care_site_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlaceOfServiceConceptId")
                        .HasColumnName("place_of_service_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaceOfServiceSourceValue")
                        .HasColumnName("place_of_service_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("care_site");
                });

            modelBuilder.Entity("omopcdmlib.Models.CdmSource", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CdmEtlReference")
                        .HasColumnName("cdm_etl_reference")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CdmHolder")
                        .HasColumnName("cdm_holder")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<byte[]>("CdmReleaseDate")
                        .HasColumnName("cdm_release_date")
                        .HasColumnType("DATE");

                    b.Property<string>("CdmSourceAbbreviation")
                        .HasColumnName("cdm_source_abbreviation")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("CdmSourceName")
                        .IsRequired()
                        .HasColumnName("cdm_source_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CdmVersion")
                        .HasColumnName("cdm_version")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("SourceDescription")
                        .HasColumnName("source_description")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceDocumentationReference")
                        .HasColumnName("source_documentation_reference")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<byte[]>("SourceReleaseDate")
                        .HasColumnName("source_release_date")
                        .HasColumnType("DATE");

                    b.Property<string>("VocabularyVersion")
                        .HasColumnName("vocabulary_version")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("cdm_source");
                });

            modelBuilder.Entity("omopcdmlib.Models.Cohort", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CohortDefinitionId")
                        .HasColumnName("cohort_definition_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CohortEndDate")
                        .IsRequired()
                        .HasColumnName("cohort_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("CohortStartDate")
                        .IsRequired()
                        .HasColumnName("cohort_start_date")
                        .HasColumnType("DATE");

                    b.Property<long>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("cohort");
                });

            modelBuilder.Entity("omopcdmlib.Models.CohortAttribute", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AttributeDefinitionId")
                        .HasColumnName("attribute_definition_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CohortDefinitionId")
                        .HasColumnName("cohort_definition_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("CohortEndDate")
                        .IsRequired()
                        .HasColumnName("cohort_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("CohortStartDate")
                        .IsRequired()
                        .HasColumnName("cohort_start_date")
                        .HasColumnType("DATE");

                    b.Property<long>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ValueAsConceptId")
                        .HasColumnName("value_as_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ValueAsNumber")
                        .HasColumnName("value_as_number")
                        .HasColumnType("NUMERIC");

                    b.HasKey("Id");

                    b.ToTable("cohort_attribute");
                });

            modelBuilder.Entity("omopcdmlib.Models.CohortDefinition", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CohortDefinitionDescription")
                        .HasColumnName("cohort_definition_description")
                        .HasColumnType("TEXT");

                    b.Property<long>("CohortDefinitionId")
                        .HasColumnName("cohort_definition_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CohortDefinitionName")
                        .IsRequired()
                        .HasColumnName("cohort_definition_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("CohortDefinitionSyntax")
                        .HasColumnName("cohort_definition_syntax")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("CohortInitiationDate")
                        .HasColumnName("cohort_initiation_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DefinitionTypeConceptId")
                        .HasColumnName("definition_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SubjectConceptId")
                        .HasColumnName("subject_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("cohort_definition");
                });

            modelBuilder.Entity("omopcdmlib.Models.Concept", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConceptClassId")
                        .IsRequired()
                        .HasColumnName("concept_class_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("ConceptCode")
                        .IsRequired()
                        .HasColumnName("concept_code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("ConceptId")
                        .HasColumnName("concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConceptName")
                        .IsRequired()
                        .HasColumnName("concept_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("DomainId")
                        .IsRequired()
                        .HasColumnName("domain_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("InvalidReason")
                        .HasColumnName("invalid_reason")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<string>("StandardConcept")
                        .HasColumnName("standard_concept")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<byte[]>("ValidEndDate")
                        .IsRequired()
                        .HasColumnName("valid_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("ValidStartDate")
                        .IsRequired()
                        .HasColumnName("valid_start_date")
                        .HasColumnType("DATE");

                    b.Property<string>("VocabularyId")
                        .IsRequired()
                        .HasColumnName("vocabulary_id")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("concept");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConceptAncestor", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AncestorConceptId")
                        .HasColumnName("ancestor_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DescendantConceptId")
                        .HasColumnName("descendant_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MaxLevelsOfSeparation")
                        .HasColumnName("max_levels_of_separation")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MinLevelsOfSeparation")
                        .HasColumnName("min_levels_of_separation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("concept_ancestor");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConceptClass", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConceptClassConceptId")
                        .HasColumnName("concept_class_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConceptClassId")
                        .IsRequired()
                        .HasColumnName("concept_class_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("ConceptClassName")
                        .IsRequired()
                        .HasColumnName("concept_class_name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("concept_class");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConceptRelationship", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConceptId1")
                        .HasColumnName("concept_id_1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConceptId2")
                        .HasColumnName("concept_id_2")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvalidReason")
                        .HasColumnName("invalid_reason")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<string>("RelationshipId")
                        .IsRequired()
                        .HasColumnName("relationship_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<byte[]>("ValidEndDate")
                        .IsRequired()
                        .HasColumnName("valid_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("ValidStartDate")
                        .IsRequired()
                        .HasColumnName("valid_start_date")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("concept_relationship");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConceptSynonym", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConceptId")
                        .HasColumnName("concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConceptSynonymName")
                        .IsRequired()
                        .HasColumnName("concept_synonym_name")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<long>("LanguageConceptId")
                        .HasColumnName("language_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("concept_synonym");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConditionEra", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConditionConceptId")
                        .HasColumnName("condition_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ConditionEraEndDate")
                        .IsRequired()
                        .HasColumnName("condition_era_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ConditionEraId")
                        .HasColumnName("condition_era_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ConditionEraStartDate")
                        .IsRequired()
                        .HasColumnName("condition_era_start_date")
                        .HasColumnType("DATE");

                    b.Property<long?>("ConditionOccurrenceCount")
                        .HasColumnName("condition_occurrence_count")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("condition_era");
                });

            modelBuilder.Entity("omopcdmlib.Models.ConditionOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConditionConceptId")
                        .HasColumnName("condition_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ConditionEndDate")
                        .HasColumnName("condition_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ConditionOccurrenceId")
                        .HasColumnName("condition_occurrence_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ConditionSourceConceptId")
                        .HasColumnName("condition_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionSourceValue")
                        .HasColumnName("condition_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte[]>("ConditionStartDate")
                        .IsRequired()
                        .HasColumnName("condition_start_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ConditionTypeConceptId")
                        .HasColumnName("condition_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StopReason")
                        .HasColumnName("stop_reason")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("condition_occurrence");
                });

            modelBuilder.Entity("omopcdmlib.Models.Death", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CauseConceptId")
                        .HasColumnName("cause_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CauseSourceConceptId")
                        .HasColumnName("cause_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CauseSourceValue")
                        .HasColumnName("cause_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte[]>("DeathDate")
                        .IsRequired()
                        .HasColumnName("death_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DeathTypeConceptId")
                        .HasColumnName("death_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("death");
                });

            modelBuilder.Entity("omopcdmlib.Models.DeviceCost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrencyConceptId")
                        .HasColumnName("currency_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DeviceCostId")
                        .HasColumnName("device_cost_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DeviceExposureId")
                        .HasColumnName("device_exposure_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PaidByCoordinationBenefits")
                        .HasColumnName("paid_by_coordination_benefits")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidByPayer")
                        .HasColumnName("paid_by_payer")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCoinsurance")
                        .HasColumnName("paid_coinsurance")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCopay")
                        .HasColumnName("paid_copay")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidTowardDeductible")
                        .HasColumnName("paid_toward_deductible")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("PayerPlanPeriodId")
                        .HasColumnName("payer_plan_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("TotalOutOfPocket")
                        .HasColumnName("total_out_of_pocket")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("TotalPaid")
                        .HasColumnName("total_paid")
                        .HasColumnType("NUMERIC");

                    b.HasKey("Id");

                    b.ToTable("device_cost");
                });

            modelBuilder.Entity("omopcdmlib.Models.DeviceExposure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DeviceConceptId")
                        .HasColumnName("device_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DeviceExposureEndDate")
                        .HasColumnName("device_exposure_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DeviceExposureId")
                        .HasColumnName("device_exposure_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DeviceExposureStartDate")
                        .IsRequired()
                        .HasColumnName("device_exposure_start_date")
                        .HasColumnType("DATE");

                    b.Property<long?>("DeviceSourceConceptId")
                        .HasColumnName("device_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceSourceValue")
                        .HasColumnName("device_source_value")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<long>("DeviceTypeConceptId")
                        .HasColumnName("device_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueDeviceId")
                        .HasColumnName("unique_device_id")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("device_exposure");
                });

            modelBuilder.Entity("omopcdmlib.Models.Domain", b =>
                {
                    b.Property<string>("DomainId")
                        .HasColumnName("domain_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long>("DomainConceptId")
                        .HasColumnName("domain_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnName("domain_name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("DomainId");

                    b.ToTable("domain");
                });

            modelBuilder.Entity("omopcdmlib.Models.DoseEra", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DoseEraEndDate")
                        .IsRequired()
                        .HasColumnName("dose_era_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DoseEraId")
                        .HasColumnName("dose_era_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DoseEraStartDate")
                        .IsRequired()
                        .HasColumnName("dose_era_start_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("DoseValue")
                        .IsRequired()
                        .HasColumnName("dose_value")
                        .HasColumnType("NUMERIC");

                    b.Property<long>("DrugConceptId")
                        .HasColumnName("drug_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UnitConceptId")
                        .HasColumnName("unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("dose_era");
                });

            modelBuilder.Entity("omopcdmlib.Models.DrugCost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("AverageWholesalePrice")
                        .HasColumnName("average_wholesale_price")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("CurrencyConceptId")
                        .HasColumnName("currency_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DispensingFee")
                        .HasColumnName("dispensing_fee")
                        .HasColumnType("NUMERIC");

                    b.Property<long>("DrugCostId")
                        .HasColumnName("drug_cost_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DrugExposureId")
                        .HasColumnName("drug_exposure_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("IngredientCost")
                        .HasColumnName("ingredient_cost")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidByCoordinationBenefits")
                        .HasColumnName("paid_by_coordination_benefits")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidByPayer")
                        .HasColumnName("paid_by_payer")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCoinsurance")
                        .HasColumnName("paid_coinsurance")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCopay")
                        .HasColumnName("paid_copay")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidTowardDeductible")
                        .HasColumnName("paid_toward_deductible")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("PayerPlanPeriodId")
                        .HasColumnName("payer_plan_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("TotalOutOfPocket")
                        .HasColumnName("total_out_of_pocket")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("TotalPaid")
                        .HasColumnName("total_paid")
                        .HasColumnType("NUMERIC");

                    b.HasKey("Id");

                    b.ToTable("drug_cost");
                });

            modelBuilder.Entity("omopcdmlib.Models.DrugEra", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DrugConceptId")
                        .HasColumnName("drug_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DrugEraEndDate")
                        .IsRequired()
                        .HasColumnName("drug_era_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DrugEraId")
                        .HasColumnName("drug_era_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DrugEraStartDate")
                        .IsRequired()
                        .HasColumnName("drug_era_start_date")
                        .HasColumnType("DATE");

                    b.Property<long?>("DrugExposureCount")
                        .HasColumnName("drug_exposure_count")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GapDays")
                        .HasColumnName("gap_days")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("drug_era");
                });

            modelBuilder.Entity("omopcdmlib.Models.DrugExposure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DaysSupply")
                        .HasColumnName("days_supply")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DoseUnitConceptId")
                        .HasColumnName("dose_unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DoseUnitSourceValue")
                        .HasColumnName("dose_unit_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("DrugConceptId")
                        .HasColumnName("drug_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DrugExposureEndDate")
                        .HasColumnName("drug_exposure_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("DrugExposureId")
                        .HasColumnName("drug_exposure_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DrugExposureStartDate")
                        .IsRequired()
                        .HasColumnName("drug_exposure_start_date")
                        .HasColumnType("DATE");

                    b.Property<long?>("DrugSourceConceptId")
                        .HasColumnName("drug_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrugSourceValue")
                        .HasColumnName("drug_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("DrugTypeConceptId")
                        .HasColumnName("drug_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("EffectiveDrugDose")
                        .HasColumnName("effective_drug_dose")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("LotNumber")
                        .HasColumnName("lot_number")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("Refills")
                        .HasColumnName("refills")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RouteConceptId")
                        .HasColumnName("route_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteSourceValue")
                        .HasColumnName("route_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Sig")
                        .HasColumnName("sig")
                        .HasColumnType("TEXT");

                    b.Property<string>("StopReason")
                        .HasColumnName("stop_reason")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("drug_exposure");
                });

            modelBuilder.Entity("omopcdmlib.Models.DrugStrength", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AmountUnitConceptId")
                        .HasColumnName("amount_unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("AmountValue")
                        .HasColumnName("amount_value")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("BoxSize")
                        .HasColumnName("box_size")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DenominatorUnitConceptId")
                        .HasColumnName("denominator_unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DenominatorValue")
                        .HasColumnName("denominator_value")
                        .HasColumnType("NUMERIC");

                    b.Property<long>("DrugConceptId")
                        .HasColumnName("drug_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IngredientConceptId")
                        .HasColumnName("ingredient_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvalidReason")
                        .HasColumnName("invalid_reason")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<long?>("NumeratorUnitConceptId")
                        .HasColumnName("numerator_unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("NumeratorValue")
                        .HasColumnName("numerator_value")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("ValidEndDate")
                        .IsRequired()
                        .HasColumnName("valid_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("ValidStartDate")
                        .IsRequired()
                        .HasColumnName("valid_start_date")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("drug_strength");
                });

            modelBuilder.Entity("omopcdmlib.Models.FactRelationship", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DomainConceptId1")
                        .HasColumnName("domain_concept_id_1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DomainConceptId2")
                        .HasColumnName("domain_concept_id_2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FactId1")
                        .HasColumnName("fact_id_1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FactId2")
                        .HasColumnName("fact_id_2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RelationshipConceptId")
                        .HasColumnName("relationship_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("fact_relationship");
                });

            modelBuilder.Entity("omopcdmlib.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnName("address_1")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Address2")
                        .HasColumnName("address_2")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("County")
                        .HasColumnName("county")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationSourceValue")
                        .HasColumnName("location_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("VARCHAR(2)");

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("VARCHAR(9)");

                    b.HasKey("Id");

                    b.ToTable("location");
                });

            modelBuilder.Entity("omopcdmlib.Models.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementConceptId")
                        .HasColumnName("measurement_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("MeasurementDate")
                        .IsRequired()
                        .HasColumnName("measurement_date")
                        .HasColumnType("DATE");

                    b.Property<long>("MeasurementId")
                        .HasColumnName("measurement_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MeasurementSourceConceptId")
                        .HasColumnName("measurement_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementSourceValue")
                        .HasColumnName("measurement_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("MeasurementTime")
                        .HasColumnName("measurement_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("MeasurementTypeConceptId")
                        .HasColumnName("measurement_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OperatorConceptId")
                        .HasColumnName("operator_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RangeHigh")
                        .HasColumnName("range_high")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("RangeLow")
                        .HasColumnName("range_low")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("UnitConceptId")
                        .HasColumnName("unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitSourceValue")
                        .HasColumnName("unit_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("ValueAsConceptId")
                        .HasColumnName("value_as_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ValueAsNumber")
                        .HasColumnName("value_as_number")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("ValueSourceValue")
                        .HasColumnName("value_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("measurement");
                });

            modelBuilder.Entity("omopcdmlib.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("NoteDate")
                        .IsRequired()
                        .HasColumnName("note_date")
                        .HasColumnType("DATE");

                    b.Property<long>("NoteId")
                        .HasColumnName("note_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoteSourceValue")
                        .HasColumnName("note_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnName("note_text")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteTime")
                        .HasColumnName("note_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("NoteTypeConceptId")
                        .HasColumnName("note_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("note");
                });

            modelBuilder.Entity("omopcdmlib.Models.Observation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ObservationConceptId")
                        .HasColumnName("observation_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ObservationDate")
                        .IsRequired()
                        .HasColumnName("observation_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ObservationId")
                        .HasColumnName("observation_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ObservationSourceConceptId")
                        .HasColumnName("observation_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObservationSourceValue")
                        .HasColumnName("observation_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("ObservationTime")
                        .HasColumnName("observation_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("ObservationTypeConceptId")
                        .HasColumnName("observation_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QualifierConceptId")
                        .HasColumnName("qualifier_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualifierSourceValue")
                        .HasColumnName("qualifier_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("UnitConceptId")
                        .HasColumnName("unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitSourceValue")
                        .HasColumnName("unit_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("ValueAsConceptId")
                        .HasColumnName("value_as_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ValueAsNumber")
                        .HasColumnName("value_as_number")
                        .HasColumnType("NUMERIC");

                    b.Property<string>("ValueAsString")
                        .HasColumnName("value_as_string")
                        .HasColumnType("VARCHAR(60)");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("observation");
                });

            modelBuilder.Entity("omopcdmlib.Models.ObservationPeriod", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ObservationPeriodEndDate")
                        .IsRequired()
                        .HasColumnName("observation_period_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ObservationPeriodId")
                        .HasColumnName("observation_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ObservationPeriodStartDate")
                        .IsRequired()
                        .HasColumnName("observation_period_start_date")
                        .HasColumnType("DATE");

                    b.Property<long>("PeriodTypeConceptId")
                        .HasColumnName("period_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("observation_period");
                });

            modelBuilder.Entity("omopcdmlib.Models.PayerPlanPeriod", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FamilySourceValue")
                        .HasColumnName("family_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte[]>("PayerPlanPeriodEndDate")
                        .IsRequired()
                        .HasColumnName("payer_plan_period_end_date")
                        .HasColumnType("DATE");

                    b.Property<long>("PayerPlanPeriodId")
                        .HasColumnName("payer_plan_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PayerPlanPeriodStartDate")
                        .IsRequired()
                        .HasColumnName("payer_plan_period_start_date")
                        .HasColumnType("DATE");

                    b.Property<string>("PayerSourceValue")
                        .HasColumnName("payer_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanSourceValue")
                        .HasColumnName("plan_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("payer_plan_period");
                });

            modelBuilder.Entity("omopcdmlib.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CareSiteId")
                        .HasColumnName("care_site_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DayOfBirth")
                        .HasColumnName("day_of_birth")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EthnicityConceptId")
                        .HasColumnName("ethnicity_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EthnicitySourceConceptId")
                        .HasColumnName("ethnicity_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EthnicitySourceValue")
                        .HasColumnName("ethnicity_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("GenderConceptId")
                        .HasColumnName("gender_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GenderSourceConceptId")
                        .HasColumnName("gender_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenderSourceValue")
                        .HasColumnName("gender_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MonthOfBirth")
                        .HasColumnName("month_of_birth")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonSourceValue")
                        .HasColumnName("person_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RaceConceptId")
                        .HasColumnName("race_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RaceSourceConceptId")
                        .HasColumnName("race_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RaceSourceValue")
                        .HasColumnName("race_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("TimeOfBirth")
                        .HasColumnName("time_of_birth")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("YearOfBirth")
                        .HasColumnName("year_of_birth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("person");
                });

            modelBuilder.Entity("omopcdmlib.Models.ProcedureCost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrencyConceptId")
                        .HasColumnName("currency_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PaidByCoordinationBenefits")
                        .HasColumnName("paid_by_coordination_benefits")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidByPayer")
                        .HasColumnName("paid_by_payer")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCoinsurance")
                        .HasColumnName("paid_coinsurance")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCopay")
                        .HasColumnName("paid_copay")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidTowardDeductible")
                        .HasColumnName("paid_toward_deductible")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("PayerPlanPeriodId")
                        .HasColumnName("payer_plan_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProcedureCostId")
                        .HasColumnName("procedure_cost_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProcedureOccurrenceId")
                        .HasColumnName("procedure_occurrence_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RevenueCodeConceptId")
                        .HasColumnName("revenue_code_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RevenueCodeSourceValue")
                        .HasColumnName("revenue_code_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte[]>("TotalOutOfPocket")
                        .HasColumnName("total_out_of_pocket")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("TotalPaid")
                        .HasColumnName("total_paid")
                        .HasColumnType("NUMERIC");

                    b.HasKey("Id");

                    b.ToTable("procedure_cost");
                });

            modelBuilder.Entity("omopcdmlib.Models.ProcedureOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModifierConceptId")
                        .HasColumnName("modifier_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProcedureConceptId")
                        .HasColumnName("procedure_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ProcedureDate")
                        .IsRequired()
                        .HasColumnName("procedure_date")
                        .HasColumnType("DATE");

                    b.Property<long>("ProcedureOccurrenceId")
                        .HasColumnName("procedure_occurrence_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProcedureSourceConceptId")
                        .HasColumnName("procedure_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcedureSourceValue")
                        .HasColumnName("procedure_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("ProcedureTypeConceptId")
                        .HasColumnName("procedure_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualifierSourceValue")
                        .HasColumnName("qualifier_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("procedure_occurrence");
                });

            modelBuilder.Entity("omopcdmlib.Models.Provider", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CareSiteId")
                        .HasColumnName("care_site_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dea")
                        .HasColumnName("dea")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long?>("GenderConceptId")
                        .HasColumnName("gender_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GenderSourceConceptId")
                        .HasColumnName("gender_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenderSourceValue")
                        .HasColumnName("gender_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Npi")
                        .HasColumnName("npi")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderName")
                        .HasColumnName("provider_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("ProviderSourceValue")
                        .HasColumnName("provider_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("SpecialtyConceptId")
                        .HasColumnName("specialty_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SpecialtySourceConceptId")
                        .HasColumnName("specialty_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialtySourceValue")
                        .HasColumnName("specialty_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("YearOfBirth")
                        .HasColumnName("year_of_birth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("provider");
                });

            modelBuilder.Entity("omopcdmlib.Models.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefinesAncestry")
                        .IsRequired()
                        .HasColumnName("defines_ancestry")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<string>("IsHierarchical")
                        .IsRequired()
                        .HasColumnName("is_hierarchical")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<long>("RelationshipConceptId")
                        .HasColumnName("relationship_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationshipId")
                        .IsRequired()
                        .HasColumnName("relationship_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("RelationshipName")
                        .IsRequired()
                        .HasColumnName("relationship_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("ReverseRelationshipId")
                        .IsRequired()
                        .HasColumnName("reverse_relationship_id")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("relationship");
                });

            modelBuilder.Entity("omopcdmlib.Models.SourceToConceptMap", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvalidReason")
                        .HasColumnName("invalid_reason")
                        .HasColumnType("VARCHAR(1)");

                    b.Property<string>("SourceCode")
                        .IsRequired()
                        .HasColumnName("source_code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("SourceCodeDescription")
                        .HasColumnName("source_code_description")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long>("SourceConceptId")
                        .HasColumnName("source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceVocabularyId")
                        .IsRequired()
                        .HasColumnName("source_vocabulary_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long>("TargetConceptId")
                        .HasColumnName("target_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetVocabularyId")
                        .IsRequired()
                        .HasColumnName("target_vocabulary_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<byte[]>("ValidEndDate")
                        .IsRequired()
                        .HasColumnName("valid_end_date")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("ValidStartDate")
                        .IsRequired()
                        .HasColumnName("valid_start_date")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.ToTable("source_to_concept_map");
                });

            modelBuilder.Entity("omopcdmlib.Models.Specimen", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AnatomicSiteConceptId")
                        .HasColumnName("anatomic_site_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnatomicSiteSourceValue")
                        .HasColumnName("anatomic_site_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long?>("DiseaseStatusConceptId")
                        .HasColumnName("disease_status_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiseaseStatusSourceValue")
                        .HasColumnName("disease_status_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("NUMERIC");

                    b.Property<long>("SpecimenConceptId")
                        .HasColumnName("specimen_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("SpecimenDate")
                        .IsRequired()
                        .HasColumnName("specimen_date")
                        .HasColumnType("DATE");

                    b.Property<long>("SpecimenId")
                        .HasColumnName("specimen_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecimenSourceId")
                        .HasColumnName("specimen_source_id")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("SpecimenSourceValue")
                        .HasColumnName("specimen_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("SpecimenTime")
                        .HasColumnName("specimen_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("SpecimenTypeConceptId")
                        .HasColumnName("specimen_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UnitConceptId")
                        .HasColumnName("unit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitSourceValue")
                        .HasColumnName("unit_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("specimen");
                });

            modelBuilder.Entity("omopcdmlib.Models.VisitCost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrencyConceptId")
                        .HasColumnName("currency_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PaidByCoordinationBenefits")
                        .HasColumnName("paid_by_coordination_benefits")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidByPayer")
                        .HasColumnName("paid_by_payer")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCoinsurance")
                        .HasColumnName("paid_coinsurance")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidCopay")
                        .HasColumnName("paid_copay")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("PaidTowardDeductible")
                        .HasColumnName("paid_toward_deductible")
                        .HasColumnType("NUMERIC");

                    b.Property<long?>("PayerPlanPeriodId")
                        .HasColumnName("payer_plan_period_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("TotalOutOfPocket")
                        .HasColumnName("total_out_of_pocket")
                        .HasColumnType("NUMERIC");

                    b.Property<byte[]>("TotalPaid")
                        .HasColumnName("total_paid")
                        .HasColumnType("NUMERIC");

                    b.Property<long>("VisitCostId")
                        .HasColumnName("visit_cost_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.ToTable("visit_cost");
                });

            modelBuilder.Entity("omopcdmlib.Models.VisitOccurrence", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CareSiteId")
                        .HasColumnName("care_site_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonId")
                        .HasColumnName("person_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisitConceptId")
                        .HasColumnName("visit_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("VisitEndDate")
                        .IsRequired()
                        .HasColumnName("visit_end_date")
                        .HasColumnType("DATE");

                    b.Property<string>("VisitEndTime")
                        .HasColumnName("visit_end_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("VisitOccurrenceId")
                        .HasColumnName("visit_occurrence_id")
                        .HasColumnType("BIGINT");

                    b.Property<long?>("VisitSourceConceptId")
                        .HasColumnName("visit_source_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VisitSourceValue")
                        .HasColumnName("visit_source_value")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte[]>("VisitStartDate")
                        .IsRequired()
                        .HasColumnName("visit_start_date")
                        .HasColumnType("DATE");

                    b.Property<string>("VisitStartTime")
                        .HasColumnName("visit_start_time")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<long>("VisitTypeConceptId")
                        .HasColumnName("visit_type_concept_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("visit_occurrence");
                });

            modelBuilder.Entity("omopcdmlib.Models.Vocabulary", b =>
                {
                    b.Property<string>("VocabularyId")
                        .HasColumnName("vocabulary_id")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<long>("VocabularyConceptId")
                        .HasColumnName("vocabulary_concept_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VocabularyName")
                        .IsRequired()
                        .HasColumnName("vocabulary_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("VocabularyReference")
                        .IsRequired()
                        .HasColumnName("vocabulary_reference")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("VocabularyVersion")
                        .IsRequired()
                        .HasColumnName("vocabulary_version")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("VocabularyId");

                    b.ToTable("vocabulary");
                });
#pragma warning restore 612, 618
        }
    }
}
